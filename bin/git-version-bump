#!/usr/bin/env ruby

require 'git-version-bump'

if ARGV[0].nil? or
   ARGV[0].empty? or
   ARGV[0] == '-h' or
   ARGV[0] == '--help'
	$stderr.puts <<-EOF.gsub(/^\t\t/, '')
		Usage: git version-bump [-n|--notes] <major|minor|patch|show>

		'major': x.y.z -> x+1.0.0
		'minor': x.y.z -> x.y+1.0
		'patch': x.y.z -> x.y.z+1

		'show': Display the current GVB version

		--release: Prompt for "release notes" to add to the release tag
	EOF
end

release_notes = ARGV.delete('-n') || ARGV.delete('--notes')
write_version = ARGV.delete('-w') || ARGV.delete('--write-version')
commit_version = ARGV.delete('-c') || ARGV.delete('--commit-version')

args = {release_notes: release_notes || false, write_version: write_version || false, commit_version: commit_version || false}


if ARGV[0].nil? or ARGV[0].empty?
	exit 1
elsif ARGV[0] == '-h' or ARGV[0] == '--help'
	exit 0
end

case ARGV[0].downcase
	when /^maj?o?r?$/
		GVB.tag_version "#{GVB.major_version + 1}.0.0", args
	when /^min?o?r?$/
		GVB.tag_version "#{GVB.major_version}.#{GVB.minor_version+1}.0", args
	when /^pa?t?c?h?$/
		GVB.tag_version "#{GVB.major_version}.#{GVB.minor_version}.#{GVB.patch_version+1}", args
	when /^sh?o?w?$/
		puts GVB.version
		exit 0
	else
		$stderr.puts "Unknown argument: #{ARGV[0]}.  Try --help."
		exit 1
end

puts "Version is now #{GVB.version}."
